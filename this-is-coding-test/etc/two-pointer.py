# 투 포인터: 리스트에 순차적으로 접근해야 할 때 2 개의 점의 위치를 기록하면서 처리하는 알고리즘
# 1. 시작점과 끝점이 첫 번째 원소의 인덱스를 가리키도록 한다
# 2. 현재 부분합이 M 과 같다면 카운트한다
# 3. 현재 부분합이 M 보다 작으면 end 를 1 증가시킨다
# 4. 현재 부분합이 M 보다 크거나 같으면 start 를 1 증가시킨다
# 5. 모든 경우를 확인할 때까지 2 번부터 4 번까지의 과정을 반복한다

n = 5  # 데이터의 개수
m = 5  # 찾고자 하는 부분합 m
data = [1, 2, 3, 2, 5]

count = 0
interval_sum = 0
end = 0
for start in range(n):
    while interval_sum < m and end < n:
        interval_sum += data[end]
        end += 1
    if interval_sum == m:
        count += 1
    interval_sum -= data[start]
print(count)


# 투 포인터 알고리즘은 정렬되어 있는 두 리스트의 합집합같은 문제에 효과적으로 사용할 수 있다.
# 이미 정렬되어 있는 두 개의 리스트가 입력으로 주어지고, 두 리스트의 모든 원소를 합쳐서 정렬한 결과를 계산하는 것이 요구사항이다
# 1. 정렬된 리스트 A 와 B 를 입력받는다.
# 2. 리스트 A 에서 처리되지 않은 원소 중 가장 작은 원소를 i 가 가리키도록 한다.
# 3. 리스트 B 에서 처리되지 않은 원소 중 가장 작은 원소를 j 가 가리키도록 한다.
# 4. A[i] 와 B[j] 중 더 작은 원소를 결과 리스트에 담는다.
# 5. 리스트 A 와 B 에서 더 이상 처리할 원소가 없을 때까지 2 ~ 4 를 반복한다.

n, m = 3, 4  # 사전에 정렬된 리스트 A, B
a = [1, 3, 5]
b = [2, 4, 6, 8]
# 리스트 A 와 B 의 모든 원소를 담을 수 있는 크기의 결과 리스트 초기화
result = [0] * (n+m)
i = 0
j = 0
k = 0
while i < n or j < m:
    if j >= m or (i < n and a[i] <= b[j]):
        result[k] = a[i]
        i += 1
    else:
        result[k] = b[j]
        j += 1
    k += 1
for i in result:
    print(i, end=" ")